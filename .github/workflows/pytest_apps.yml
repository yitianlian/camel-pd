# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Pytest Gradio Apps and Examples

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  pytest_apps:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.8
      uses: actions/setup-python@v3
      with:
        python-version: "3.8"
    - name: Install poetry
      uses: abatilo/actions-poetry@v2
    - name: Setup poetry virtual environment
      run: |
        poetry config virtualenvs.create true --local
        poetry config virtualenvs.in-project true --local
    - uses: actions/cache@v3
      name: Cache for the virtual environment based on pyproject.toml
      with:
        path: ./.venv
        key: ${{ runner.os }}-venv-${{ hashFiles('pyproject.toml') }}
    - name: Install the project dependencies
      run: poetry install --with dev -E all
    - name: Run pytest
      env:
        OPENAI_API_KEY: "${{ secrets.OPENAI_API_KEY }}"
      run: poetry run pytest -v apps/

  pytest_examples:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.8
      uses: actions/setup-python@v3
      with:
        python-version: "3.8"
    - name: Install poetry
      uses: abatilo/actions-poetry@v2
    - name: Setup poetry virtual environment
      run: |
        poetry config virtualenvs.create true --local
        poetry config virtualenvs.in-project true --local
    - uses: actions/cache@v3
      name: Cache for the virtual environment based on pyproject.toml
      with:
        path: ./.venv
        key: ${{ runner.os }}-venv-${{ hashFiles('pyproject.toml') }}
    - name: Install the project dependencies
      run: poetry install --with dev -E all
    - name: Run pytest
      env:
        OPENAI_API_KEY: "${{ secrets.OPENAI_API_KEY }}"
      run: poetry run pytest -v examples/
